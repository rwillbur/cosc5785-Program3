/*
* Shaya Wolf
* cosc5785 - Program 3
* program3.lpp
* 10/17/2017
*/
%{

#include<string>
#include<iostream>
#include<iomanip>

#include"attributes.h"
#include"node.hpp"
#include"program3.tab.h"

using namespace std;

int coln = 1;
int errn = 0;

void yyerror(const char * string) {
  cerr << string << endl;
  return;
}

%}

%option outfile="program3_lex.cpp"
%option noyywrap
%option yylineno

SLCOMMENT   (\/\/.*[\n])
NUMBER      [0-9]+
ERRTERM     [\[\]{}<>!\+\-\*\/%;,()=. \t\n]
ID          [\_A-Za-z][\_A-Za-z0-9]* 
NOTERRTERM  [^ \n\t\[\]\{\}!&|=<>\+\-\*\/\%\;\,\(\)]

%x COMMENT INNERERROR WORDERROR

%%

"/*" {
  updateAtts(yylineno, coln, yyleng, "COMMENT", "MULTILINE");
  BEGIN(COMMENT);
  return COMM; 
}

<COMMENT>[^*\n]* {
  coln += yyleng;
}

<COMMENT>"*"+[^*/\n]* {
  coln += yyleng; 
} 

<COMMENT>\n {
  coln = 1; 
}

<COMMENT>"*"+"/" {
  coln += yyleng;
  BEGIN(INITIAL); 
}

{SLCOMMENT} {
  updateAtts(yylineno, coln, yyleng, "COMMENT", yytext);
  coln = 1; 
  return COMM; 
}

"int" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return INT; 
}

"void" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return VOID; 
}

"class" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return CLASS; 
}

"new" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return NEW; 
}

"print" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return PRINT; 
}

"read" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return READ; 
}

"return" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return RETURN; 
}

"while" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return WHILE; 
}

"if" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return IF; 
}

"else" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return ELSE; 
}

"this" {
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln+= yyleng;
  return THIS; 
}

"==" {
  //updateAtts(yylineno, coln, yyleng, "R-OP", yytext);
  //yylval.ttype = new Node;
  //yylval.ttype->setVal(atoi(yytext));
  coln += yyleng; 
  return DEQ; 
}

"!=" {
  //updateAtts(yylineno, coln, yyleng, "R-OP", yytext);
  //yylval.ttype = new Node;
  //yylval.ttype->setVal(atoi(yytext));
  coln += yyleng; 
  return NEQ; 
}

"<=" {
  //updateAtts(yylineno, coln, yyleng, "R-OP", yytext);
  //yylval.ttype = new Node;
  //yylval.ttype->setVal(atoi(yytext));
  coln += yyleng; 
  return LEQ; 
}

">=" {
  //updateAtts(yylineno, coln, yyleng, "R-OP", yytext);
  //yylval.ttype = new Node;
  //yylval.ttype->setVal(atoi(yytext));
  coln += yyleng; 
  return GEQ; 
}

"<" {
  //updateAtts(yylineno, coln, yyleng, "R-OP", yytext);
  //yylval.ttype = new Node;
  //yylval.ttype->setVal(atoi(yytext));
  coln += yyleng; 
  return LT; 
}

">" {
  //updateAtts(yylineno, coln, yyleng, "R-OP", yytext);
  //yylval.ttype = new Node;
  //yylval.ttype->setVal(atoi(yytext));
  coln += yyleng; 
  return GT; 
}

"+" {
  updateAtts(yylineno, coln, yyleng, "S-OP", yytext);
  coln += yyleng; 
  return PLUS; 
}

"-"  {
  updateAtts(yylineno, coln, yyleng, "S-OP", yytext);
  coln += yyleng; 
  return MINUS; 
}

"||"  {
  updateAtts(yylineno, coln, yyleng, "S-OP", yytext);
  coln += yyleng; 
  return OR; 
}

"*" {
  updateAtts(yylineno, coln, yyleng, "P-OP", yytext);
  coln += yyleng; 
  return MULT; 
}

"/" {
  updateAtts(yylineno, coln, yyleng, "P-OP", yytext);
  coln += yyleng; 
  return DIVD; 
}

"%" {
  updateAtts(yylineno, coln, yyleng, "P-OP", yytext);
  coln += yyleng; 
  return MOD; 
}

"&&" {
  updateAtts(yylineno, coln, yyleng, "P-OP", yytext);
  coln += yyleng; 
  return AND; 
}

"!" {
  updateAtts(yylineno, coln, yyleng, "U-OP", yytext);
  coln += yyleng; 
  return BANG; 
} 

"[" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return LBRACK; 
}

"]" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return RBRACK; 
}

"{" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return LBRACE; 
}
  
"}" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return RBRACE; 
}

";" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return SEMI; 
}

"," { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return COMMA; 
}

"(" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return LPAREN; 
}

")" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return RPAREN; 
}

"=" { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return EQ; 
}

"." { 
  updateAtts(yylineno, coln, yyleng, yytext, "");
  coln += yyleng;
  return DOT; 
}


{ID} {
  updateAtts(yylineno, coln, yyleng, "ID", yytext);
  coln+= yyleng;
  return IDEN; 
}

{NUMBER} {
  yylval.atts = new struct attributes;
  updateAtts(yylineno, coln, yyleng, "NUMBER", yytext);
  coln+= yyleng;
  return NUM; 
}

[ ]+ {
  //updateAtts(yylineno, coln, yyleng, "SPACE", "");
  coln+= yyleng;
  //return WSPC; 
}

[\n]+ {
  //updateAtts(yylineno, coln, yyleng, "NEWLINE", "");
  coln = 1;
  //return WSPC; 
}

[\t]+ {
  //updateAtts(yylineno, coln, yyleng, "WSPACE", "");
  coln+= yyleng;
  //return WSPC; 
}

. {
  errn++;
  yyless(0);
  BEGIN(WORDERROR);
  if(errn > 20) {
    return MAXERR;
  }
}

<WORDERROR>{NOTERRTERM}* {
  yymore();
  BEGIN(INNERERROR); 
} 

<WORDERROR>[ \n\t\[\]\{\}!=<>\+\-\*\/\%\;\,\(\)] {
  yyless(yyleng-1);
  updateAtts(yylineno, coln, yyleng, yytext, "WORD ERROR");
  coln += yyleng;
  BEGIN(INITIAL);
  return WRDERR; 
}

<WORDERROR><<EOF>> {
  yyless(yyleng-1);
  updateAtts(yylineno, coln, yyleng, yytext, "WORD ERROR");
  coln += yyleng;
  BEGIN(INITIAL);
  return WRDERR; 
}

<WORDERROR>[&|] {
  yymore(); 
}

<INNERERROR>"&&"|"||" {
  yyless(yyleng-2);
  updateAtts(yylineno, coln, yyleng, yytext, "WORD ERROR");
  coln += yyleng;
  BEGIN(INITIAL);
  return WRDERR; 
}

<INNERERROR>{ERRTERM} {
  yyless(yyleng-1);
  if(yyleng == 1) {
    updateAtts(yylineno, coln, yyleng, yytext, "CHAR ERROR");
  } else { 
    updateAtts(yylineno, coln, yyleng, yytext, "WORD ERROR");
  }
  coln += yyleng;
  BEGIN(INITIAL);
  return WRDERR; 
}

<INNERERROR>. {
  yymore();
  BEGIN(WORDERROR); 
}

%%
